
- Load balancing requirements for user-provisioned infrastructure

      yum install haproxy
      sudo setsebool -P haproxy_connect_any 1
      sudo systemctl enable haproxy
      sudo systemctl start haproxy
      sudo systemctl status haproxy
	  vim /etc/haproxy/haproxy.cfg
-----------------------------------------------------------------------------------------------
	  
	  
# Global settings
#---------------------------------------------------------------------
global
    maxconn     20000
    log         /dev/log local0 info
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    log                     global
    mode                    http
    option                  httplog
    option                  dontlognull
    option http-server-close
    option redispatch
    option forwardfor       except 127.0.0.0/8
    retries                 3
    maxconn                 20000
    timeout http-request    10000ms
    timeout http-keep-alive 10000ms
    timeout check           10000ms
    timeout connect         40000ms
    timeout client          300000ms
    timeout server          300000ms
    timeout queue           50000ms

# Enable HAProxy stats
listen stats
    bind :9000
    stats uri /stats
    stats refresh 10000ms

# Kube API Server
frontend k8s_api_frontend
    bind *:6443
    default_backend k8s_api_backend
    mode tcp

backend k8s_api_backend
    mode tcp
    balance source
    server      master1.ibm2.test.local 10.100.80.80:6443 check
    server      master2.ibm2.test.local 10.100.80.81:6443 check
    server      master3.ibm2.test.local 10.100.80.82:6443 check

# OCP Machine Config Server
frontend ocp_machine_config_server_frontend
    mode tcp
    bind *:22623
    default_backend ocp_machine_config_server_backend

backend ocp_machine_config_server_backend
    mode tcp
    balance source
    server      master1.ibm2.test.local 10.100.80.80:22623 check
    server      master2.ibm2.test.local 10.100.80.81:22623 check
    server      master3.ibm2.test.local 10.100.80.82:22623 check

# OCP Ingress - layer 4 tcp mode for each. Ingress Controller will handle layer 7.
frontend ocp_http_ingress_frontend
    bind *:80
    default_backend ocp_http_ingress_backend
    mode tcp

backend ocp_http_ingress_backend
    balance source
    mode tcp
    server      worker1.ibm2.test.local 10.100.80.83:80 check
    server      worker2.ibm2.test.local 10.100.80.84:80 check
    server      worker3.ibm2.test.local 10.100.80.85:80 check
frontend ocp_https_ingress_frontend
    bind *:443
    default_backend ocp_https_ingress_backend
    mode tcp

backend ocp_https_ingress_backend
    mode tcp
    balance source
    server      worker1.ibm2.test.local 10.100.80.83:443 check
    server      worker2.ibm2.test.local 10.100.80.84:443 check
    server      worker3.ibm2.test.local 10.100.80.85:443 check

---------------------------------------------------------------------------------------------

IP FailOver Setup Using KeepAlived 
----------------------------------

Network Scenario:
1. LB1 Server: 10.100.0.24 ( ens224 )
2. LB2 Server: 10.101.0.24 ( ens224 )
3. Virtual IP: 10.100.0.25


Step 1 – Install Required Packages  >>> yum install gcc kernel-headers kernel-devel

Step 2 – Install Keepalived  >>> yum install keepalived

Step 3 – Configure Keepalived on LB1    >>> vim /etc/keepalived/keepalived.conf
-------------------------------------------------------------------------------

! Configuration File for keepalived

vrrp_instance VI_1 {
    state MASTER
    interface ens224
    virtual_router_id 51
    priority 101
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        10.100.0.25/8
    }
}
--------------------------------------------------------------------------------

Step 4 – Configure KeepAlived on LB2    >>> vim /etc/keepalived/keepalived.conf
-------------------------------------------------------------------------------

! Configuration File for keepalived

vrrp_instance VI_1 {
    state BACKUP
    interface ens224
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        10.100.0.25/8
    }
}

-----------------------------------------------------------------------------------

Step 5 – Start KeepAlived

- systemctl start keepalived.service
- systemctl enable keepalived.service
- systemctl status keepalived.service
-----------------------------------------------------------------------------------

Step 6 – Check Virtual IPs    >>> ip addr show ens224


##################################################################################################################################################################
#                      -  This documentation is written during my Internship at Safa Soft (July 2021 - Nov 2021 )                                                #
#                           -  The below is an installation of Webservers on CentOS 7 & 8, Ubuntu                                                                #
##################################################################################################################################################################

### CentOS 7 ###

## LAMP ##
sudo yum install httpd
sudo systemctl start httpd.service
sudo systemctl enable httpd.service
sudo firewall-cmd --permanent --zone=public --add-service=http
sudo firewall-cmd --permanent --zone=public --add-service=https
sudo firewall-cmd --reload
sudo yum install mariadb-server mariadb
sudo systemctl start mariadb
sudo mysql_secure_installation
sudo systemctl enable mariadb.service
sudo yum install php php-mysql
sudo systemctl restart httpd.service
sudo yum install yum-utils –y
sudo yum install epel-release –y
sudo yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm
sudo yum-config-manager ––enable remi–php74
sudo yum install php php-common php-opcache php-mcrypt php-cli php-gd php-curl php-mysql –y

## Creating a virtual host ##
sudo mkdir -p /var/www/example.com
sudo nano /etc/httpd/conf.d/example.com.conf

<VirtualHost *:80>
    ServerName example.com
    ServerAlias www.example.com
    ServerAdmin webmaster@example.com
    DocumentRoot /var/www/example.com/

    <Directory /var/www/example.com/>
        Options -Indexes +FollowSymLinks
        AllowOverride All
    </Directory>

    ErrorLog /var/log/httpd/example.com-error.log
    CustomLog /var/log/httpd/example.com-access.log combined
</VirtualHost>

sudo systemctl restart httpd

## SSL Cert ##
sudo yum install epel-release
sudo yum install certbot python2-certbot-apache mod_ssl
sudo certbot --apache -d example.com

## Creating Wordpress in mariadb DATABASE ##
sudo mysql -u root -p
CREATE DATABASE wordpress;
GRANT ALL ON wordpress.* TO 'wordpress'@'localhost' IDENTIFIED BY 'secret';
FLUSH PRIVILEGES;
quit

## Installing Wordpress ##
cd /var/www/example.com
sudo wget https://wordpress.org/latest.tar.gz
sudo tar xvzf latest.tar.gz
sudo rm -v latest.tar.gz
sudo chown -Rf apache:apache ./wordpress/
sudo chmod -Rf 775 ./wordpress/
sudo systemctl restart httpd

### CentOS 8 ###

## LAMP ##
sudo dnf install httpd httpd-tools
sudo systemctl enable httpd
sudo systemctl start httpd
sudo firewall-cmd --permanent --zone=public --add-service=http
sudo firewall-cmd --permanent --zone=public --add-service=https
sudo firewall-cmd --reload
sudo dnf install mariadb-server mariadb -y
sudo systemctl start mariadb
sudo systemctl enable mariadb
sudo mysql_secure_installation
sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-l
sudo dnf install install dnf-utils http://rpms.remirepo.net/enterprise/remi-release-8.rpm
sudo dnf module reset php
sudo dnf module enable php:remi-7.4
sudo dnf install php php-opcache php-gd php-curl php-mysqlnd
## Creating VirtualHost ##
sudo mkdir -p /var/www/example.com
sudo nano /etc/httpd/conf.d/example.com.conf

<VirtualHost *:80>
    ServerName example.com
    ServerAlias www.example.com
    ServerAdmin webmaster@example.com
    DocumentRoot /var/www/example.com/

    <Directory /var/www/example.com/>
        Options -Indexes +FollowSymLinks
        AllowOverride All
    </Directory>

    ErrorLog /var/log/httpd/example.com-error.log
    CustomLog /var/log/httpd/example.com-access.log combined
</VirtualHost>

sudo systemctl restart httpd

## SSL Cert ##
sudo dnf install epel-release
sudo dnf install certbot python3-certbot-apache
sudo certbot --apache -d amr.test.safaamsa.com
## Creating wordpress in mariadb Database ##
sudo mysql -u root -p
CREATE DATABASE wordpress;
GRANT ALL ON wordpress.* TO 'wordpress'@'localhost' IDENTIFIED BY 'secret';
FLUSH PRIVILEGES;
quit
## Installing Wordpress ##
cd /var/www/example.com
sudo wget https://wordpress.org/latest.tar.gz
sudo tar xvzf latest.tar.gz
sudo rm -v latest.tar.gz
sudo chown -Rf apache:apache ./wordpress/
sudo chmod -Rf 775 ./wordpress/
sudo systemctl restart httpd

### Ubuntu ###
sudo sed -i /cosmic/bionoc ------ # Search for it #

## LAMP ##
sudo apt update
sudo apt upgrade
sudo apt install -y apache2 apache2-utils
sudo systemctl start apache2
sudo systemctl enable apache2
sudo apt install mariadb-server mariadb-client
sudo systemctl start mariadb
sudo systemctl enable mariadb
sudo mysql_secure_installation
sudo apt install php libapache2-mod-php
sudo a2enmod php7.2
sudo systemctl restart apache2


## Creating a virtual host ##
sudo mkdir -p /var/www/example.com
sudo chmod -R 755 /var/www

sudo nano /etc/apache2/sites-available/example.com.conf

<VirtualHost *:80>
    ServerAdmin admin@example.com
    ServerName example.com
    ServerAlias www.example.com
    DocumentRoot /var/www/example.com/
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

sudo systemctl reload apache2
sudo a2ensite example.com.conf
sudo a2dissite 000-default.conf
sudo systemctl reload apache2

## Creating Wordpress in mariadb DATABASE ##
sudo mysql -u root -p
CREATE DATABASE wordpress;
GRANT ALL ON wordpress.* TO 'wordpress'@'localhost' IDENTIFIED BY 'secret';
FLUSH PRIVILEGES;
quit

## Installing Wordpress ##
cd /var/www/example.com
sudo wget https://wordpress.org/latest.tar.gz
sudo tar xvzf latest.tar.gz
sudo rm -v latest.tar.gz
sudo chown -Rf www-data:www-data ./wordpress/
sudo chmod -Rf 775 ./wordpress/
sudo systemctl restart apache2

## Allowing ufw firewall then Installing SSL Cert ##
sudo a2enmod ssl
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh
sudo ufw allow 22
sudo ufw enable
sudo ufw allow 'Apache Full'
sudo ufw delete allow 'Apache'
sudo ufw allow '443/tcp'
sudo ufw allow '443'
sudo add-apt-repository ppa:certbot/certbot
sudo apt install python-certbot-apache
sudo certbot --apache -d amr.test.safaamsa.com
sudo certbot renew --dry-run
sudo apache2ctl configtest % Checks if virtualhost conf file has syntax error %
